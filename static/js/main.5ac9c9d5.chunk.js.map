{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","bill","setBill","percent","setPercent","custom","setCustom","people","setPeople","tip","setTip","total","setTotal","style","setStyle","handlePercent","value","activeTip","inactiveAll","document","getElementById","backgroundColor","resetTip","getElementsByName","i","length","useEffect","result","isNaN","toFixed","className","for","id","type","placeholder","onChange","e","parseFloat","target","min","max","name","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5ac9c9d5.chunk.js","sourcesContent":["import \"./App.css\";\nimport { BsCurrencyDollar, BsPersonFill } from \"react-icons/bs\";\nimport { useState, useEffect } from \"react\";\n\nfunction App() {\n  // All states variables.\n  const [bill, setBill] = useState(0);\n  const [percent, setPercent] = useState(0);\n  const [custom, setCustom] = useState(\"\");\n  const [people, setPeople] = useState(1);\n  const [tip, setTip] = useState(0);\n  const [total, setTotal] = useState(0);\n  const [style, setStyle] = useState();\n\n  // When the bill is inputed, update the state.\n  const handleMoney = (e) => {\n    setBill(parseFloat(e.target.value));\n  };\n\n  // When the number of people is inputed, update the state\n  const handlePeople = (e) => {\n    if (e.target.value < 0) {\n      setPeople(0);\n    } else {\n      setPeople(parseFloat(e.target.value));\n    }\n  };\n\n  // When the predefined tip percentage is clicked, update the state and background color.\n  const handlePercent = (value) => {\n    setPercent(value);\n    activeTip(value);\n  };\n\n  // When a custom tip amount is inputed, update the state and reset the background of predefined tip percentages.\n  const handleCustom = (e) => {\n    setPercent(parseFloat(e.target.value));\n    setCustom(e.target.value);\n    inactiveAll();\n  };\n\n  // When the reset button is clicked, reset the state to intial values.\n  const handleReset = () => {\n    setBill(0);\n    setPercent(0);\n    setPeople(1);\n    setTip(0);\n    setTotal(0);\n    setCustom(\"\");\n    inactiveAll();\n  };\n\n  // When called, change the background of the predefined tip value\n  const activeTip = (value) => {\n    inactiveAll();\n    const getTip = document.getElementById(value);\n    getTip.style.backgroundColor = \"var(--clr-strong-cyan)\";\n  };\n\n  // When called reset the background of all predefined tip buttons to intial state.\n  const inactiveAll = () => {\n    const resetTip = document.getElementsByName(\"percent\");\n    for (let i = 0; i < resetTip.length; i++) {\n      resetTip[i].style.backgroundColor = \"\";\n    }\n  };\n\n  // When the bill, the tip percentage or the number people change: Recalculate the the tip amount\n  useEffect(() => {\n    const result = (bill * percent) / 100 / people;\n    if (isNaN(result) || people === 0) {\n      setTip(\"0.00\");\n    } else {\n      setTip(result.toFixed(2));\n    }\n  }, [bill, percent, people]);\n\n  // When the bill, the tip percentage or the number of people change: Recalculate the total amount\n  useEffect(() => {\n    const result = (bill + (bill * percent) / 100) / people;\n    if (isNaN(result) || people === 0) {\n      setTotal(\"0.00\");\n    } else {\n      setTotal(result.toFixed(2));\n    }\n  }, [bill, percent, people]);\n\n  // When the number of people changes, check if the number if equal to 0.\n  useEffect(() => {\n    if (people === 0) {\n      setStyle(\"no-people\");\n    } else {\n      setStyle(\"yes-people\");\n    }\n  }, [people]);\n\n  return (\n    <div className=\"App flex\">\n      <header className=\"fs-600 fw-800\">\n        <h1 className=\"fs-600 fw-700\">\n          SPLI\n          <br />\n          TTER\n        </h1>\n      </header>\n      <main className=\"bg-white container flex\">\n        <div className=\"calc\">\n          <section>\n            <h2>Bill</h2>\n            <div className=\"input-wrapper\">\n              <label className=\"input-icon\">\n                <BsCurrencyDollar />\n              </label>\n              <label for=\"bill\" className=\"sr-only\">\n                Bill\n              </label>\n              <input\n                id=\"bill\"\n                className=\"inputs\"\n                type=\"number\"\n                placeholder=\"0\"\n                value={bill}\n                onChange={handleMoney}\n                min=\"0\"\n                max=\"99999\"\n              />\n            </div>\n          </section>\n          <section>\n            <h2>Select Tip %</h2>\n            <div className=\"tip-grid grid text-white fs-700\">\n              <button\n                id=\"5\"\n                name=\"percent\"\n                className=\"btn percent bg-dark\"\n                onClick={() => handlePercent(5)}\n              >\n                5%\n              </button>\n              <button\n                id=\"10\"\n                name=\"percent\"\n                className=\"btn percent bg-dark\"\n                onClick={() => handlePercent(10)}\n              >\n                10%\n              </button>\n              <button\n                id=\"15\"\n                name=\"percent\"\n                className=\"btn percent bg-dark\"\n                onClick={() => handlePercent(15)}\n              >\n                15%\n              </button>\n              <button\n                id=\"25\"\n                name=\"percent\"\n                className=\"btn percent bg-dark\"\n                onClick={() => handlePercent(25)}\n              >\n                25%\n              </button>\n              <button\n                id=\"50\"\n                name=\"percent\"\n                className=\"btn percent bg-dark\"\n                onClick={() => handlePercent(50)}\n              >\n                50%\n              </button>\n              <label for=\"custom\" className=\"sr-only\">\n                Custom percentage\n              </label>\n              <input\n                id=\"custom\"\n                className=\"custom fs-600 fw-700\"\n                placeholder=\"Custom\"\n                type=\"number\"\n                value={custom}\n                onChange={handleCustom}\n                min=\"0\"\n              ></input>\n            </div>\n          </section>\n          <section>\n            <div className=\"flex no-zero-div\">\n              <h2>Number of People</h2>\n              {people === 0 && <p className=\"no-zero fs-200\">Can't be zero</p>}\n            </div>\n            <div className=\"input-wrapper\">\n              <label for=\"people\" className=\"sr-only\">\n                Number of people\n              </label>\n              <input\n                id=\"people\"\n                className={style}\n                type=\"number\"\n                onChange={handlePeople}\n                value={people}\n                min=\"0\"\n              />\n              <label className=\"input-icon\">\n                <BsPersonFill />\n              </label>\n            </div>\n          </section>\n        </div>\n        <div className=\"totals bg-dark text-white\">\n          <div className=\"tip total-flex flex\">\n            <ul>\n              <li className=\"fw-700\">Tip Amount</li>\n              <li className=\"text-light fs-200 fw-700\">/ person</li>\n            </ul>\n            <h2 className=\"fs-800\">${tip}</h2>\n          </div>\n          <div className=\"total total-flex flex\">\n            <ul>\n              <li className=\"fw-700\">Total</li>\n              <li className=\"text-light fs-200 fw-700\">/ person</li>\n            </ul>\n            <h2 className=\"fs-800\">${total}</h2>\n          </div>\n          <button className=\"btn reset text-dark fs-500\" onClick={handleReset}>\n            RESET\n          </button>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}